#pragma once
#include <string>
#include "Film.h"
#include <vector>
//#include <iostream>
//#include "Film.h"
//#include "Repository.h"
//#include <string>
//#include <vector>
//using namespace std;
//
//class Validation
//{
//
//public:
//
//	////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// <summary>	Default constructor. </summary>
//	///
//	/// <remarks>	Popai, 04/05/2020. </remarks>
//	////////////////////////////////////////////////////////////////////////////////////////////////////
//	Validation();
//
//	////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// <summary>	Validates the string. </summary>
//	///
//	/// <remarks>	Popai, 01/05/2020. </remarks>
//	///
//	/// <returns>	True if it succeeds, false if it fails. </returns>
//	////////////////////////////////////////////////////////////////////////////////////////////////////
//	bool validate_string (string s);
//
//	////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// <summary>	Validates the int. </summary>
//	///
//	/// <remarks>	Popai, 01/05/2020. </remarks>
//	///
//	/// <returns>	True if it succeeds, false if it fails. </returns>
//	////////////////////////////////////////////////////////////////////////////////////////////////////
//	bool validate_int(string s);
//
//	////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// <summary>	Validates the ja nein described by frage. </summary>
//	///
//	/// <remarks>	Popai, 01/05/2020. </remarks>
//	///
//	/// <param name="frage">	The frage. </param>
//	///
//	/// <returns>	True if it succeeds, false if it fails. </returns>
//	////////////////////////////////////////////////////////////////////////////////////////////////////
//	bool validate_ja_nein(string frage);
//
//	bool invalid_year(int year);
//
//};

class MovieException
{
private:
	std::vector<std::string> errors;

public:
	MovieException(std::vector<std::string> _errors);
	std::vector<std::string> getErrors() const;
};

class MovieValidator
{
public:
	MovieValidator() {}
	static void validate(Film& m);
};